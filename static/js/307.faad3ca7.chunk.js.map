{"version":3,"file":"static/js/307.faad3ca7.chunk.js","mappings":"sQAEaA,EAAcC,EAAAA,GAAAA,GAAH,sBACXC,EAAkBD,EAAAA,GAAAA,GAAH,sBACfE,EAAWF,EAAAA,GAAAA,GAAH,sBACRG,EAAcH,EAAAA,GAAAA,EAAH,sBACXI,EAAYJ,EAAAA,GAAAA,EAAH,kD,SCiCtB,EAjCgB,WACZ,OAAgCK,EAAAA,EAAAA,WAAS,iBAAM,MAA/C,eAAQC,EAAR,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACNC,EAAAA,EAAAA,WAAwBH,GACvBI,MAAK,YAA4B,IAAjBC,EAAgB,EAAxBC,KAAQD,QACbN,EAAWM,MAEdE,MAAMC,QAAQC,OAEhB,CAACT,KAGA,SAACU,EAAA,EAAD,CAASC,MAAM,UAAf,SAEQb,EAAQc,QACA,SAACrB,EAAD,UAEQO,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACR,UAACvB,EAAD,YACI,SAACC,EAAD,UAAYoB,KACZ,SAACnB,EAAD,UAAeoB,MAFIC,SAOrC,SAACpB,EAAD,yD,0FC/BTqB,EAAazB,EAAAA,GAAAA,QAAH,sBACV0B,EAAe1B,EAAAA,GAAAA,GAAH,gG,SCqBzB,EApBgB,SAAC,GAAyB,IAAvB2B,EAAsB,EAAtBA,SAAUR,EAAY,EAAZA,MACzB,OACI,SAACM,EAAD,WACI,UAACG,EAAA,EAAD,WAEQT,IAAS,SAACO,EAAD,UACIP,IAGhBQ,S,yGCRXE,EACQ,mBADRA,EAEM,eAFNA,EAGa,SAHbA,EAII,WAJJA,EAKO,WAGbC,IAAAA,SAAAA,QAViB,gCAWjB,IAEMC,EAAiB,mCAAG,6GAEKD,IAAAA,IAAUD,EAJf,6CAEA,UAGK,OADjBG,EAFY,QAGNC,OAHM,yCAIPD,GAJO,aAOZ,IAAIE,MAAMF,GAPE,gCASlBhB,QAAQC,IAAR,MATkB,yDAAH,qDAYjBkB,EAAW,mCAAG,WAAOC,GAAP,gGAEWN,IAAAA,IAAUD,EAAAA,mDAAgDO,GAFrE,UAGW,OADjBJ,EAFM,QAGAC,OAHA,yCAIDD,GAJC,aAON,IAAIE,MAAMF,GAPJ,gCASZhB,QAAQC,IAAR,MATY,yDAAH,sDAaXoB,EAAe,mCAAG,WAAO7B,GAAP,gGAEOsB,IAAAA,IAAUD,EAA2BrB,EA7B1C,6CA2BF,UAGO,OADjBwB,EAFU,QAGJC,OAHI,yCAILD,GAJK,aAOV,IAAIE,MAAMF,GAPA,gCAShBhB,QAAQC,IAAR,MATgB,yDAAH,sDAYfqB,EAAO,mCAAG,WAAO9B,GAAP,gGAEesB,IAAAA,IAAUD,EAA2BrB,EAAUqB,EAzCpD,6CAuCV,UAGe,OADjBG,EAFE,QAGIC,OAHJ,yCAIGD,GAJH,aAOF,IAAIE,MAAMF,GAPR,gCASRhB,QAAQC,IAAR,MATQ,yDAAH,sDAYPsB,EAAU,mCAAG,WAAO/B,GAAP,gGAEYsB,IAAAA,IAAUD,EAA2BrB,EAAUqB,EArDpD,6CAmDP,UAGY,OADjBG,EAFK,QAGCC,OAHD,yCAIAD,GAJA,aAOL,IAAIE,MAAMF,GAPL,gCASXhB,QAAQC,IAAR,MATW,yDAAH,sDAaHN,EAAe,CACxBoB,kBAAAA,EACAI,YAAAA,EACAE,gBAAAA,EACAC,QAAAA,EACAC,WAAAA,EACAC,WAhFe","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.component.js","components/common/Section/Section.styled.js","components/common/Section/Section.component.js","services/movieService.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ReviewsList = styled.ul``;\nexport const ReviewsListItem = styled.li``;\nexport const UserName = styled.h3``;\nexport const CommentText = styled.p``;\nexport const NoReviews = styled.p`\n    margin-bottom: 20px;\n`;\n","import Section from 'components/common/Section';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieService } from 'services';\nimport { ReviewsList, ReviewsListItem, UserName, CommentText, NoReviews } from './Reviews.styled';\n\nconst Reviews = () => {\n    const [ reviews, setreviews ] = useState(() => []);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        movieService.getReviews(movieId)\n        .then(({ data: { results } }) => {\n            setreviews(results);\n        })\n        .catch(console.log);\n\n    }, [movieId]);\n\n    return (\n        <Section title='Reviews'>\n            {\n                reviews.length\n                    ?   <ReviewsList>\n                            {\n                                reviews.map(({ author, content, id  }) => (\n                                    <ReviewsListItem key={ id }>\n                                        <UserName>{ author }</UserName>\n                                        <CommentText>{ content }</CommentText>\n                                    </ReviewsListItem>\n                                ))\n                            }\n                        </ReviewsList>\n                    : <NoReviews>We don't have any review for this film</NoReviews>\n            }\n        </Section>\n    );\n}\n\nexport default Reviews;","import styled from 'styled-components';\n\nexport const AppSection = styled.section``;\nexport const SectionTitle = styled.h1`\n    margin-bottom: 20px;\n    text-align: center;\n    color: inherit;\n`; ","import PropTypes from 'prop-types';\nimport Container from '../Container';\nimport { AppSection, SectionTitle } from './Section.styled';\n\nconst Section = ({ children, title }) => {\n    return (\n        <AppSection>\n            <Container>\n                {\n                    title && <SectionTitle>\n                                {title}\n                            </SectionTitle>\n                }\n                {children}\n            </Container>\n        </AppSection>\n    )\n}\n\nSection.propTypes = {\n    children: PropTypes.node,\n    title: PropTypes.string\n}\n\nexport default Section;","import axios from 'axios';\n\nconst AUTH_TOKEN = '5ce599886a4c0703a030654068991e03';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst POSTER_URL = 'https://image.tmdb.org/t/p/original'\nconst END_POINTS = {\n    TRENDING: 'trending/all/day',\n    SEARCH: 'search/movie',\n    MOVIE_DETAILS: 'movie/',\n    CAST: '/credits',\n    REVIEWS: '/reviews'\n}\n\naxios.defaults.baseURL = BASE_URL;\nconst appendToken = () => '?api_key=' + AUTH_TOKEN;\n\nconst getTrendingMovies = async () => {\n    try {\n        const response = await axios.get(END_POINTS.TRENDING + appendToken());\n        if(response.status === 200) {\n            return response;\n        }\n\n        throw new Error(response)\n    } catch (error) {\n        console.log(error);\n    }\n};\nconst searchMovie = async (movie) => {\n    try {\n        const response = await axios.get(END_POINTS.SEARCH + appendToken() + '&query=' + movie);\n        if(response.status === 200) {\n            return response;\n        }\n\n        throw new Error(response)\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nconst getMovieDetails = async (movieId) => {\n    try {\n        const response = await axios.get(END_POINTS.MOVIE_DETAILS + movieId + appendToken());\n        if(response.status === 200) {\n            return response;\n        }\n\n        throw new Error(response)\n    } catch (error) {\n        console.log(error);\n    }\n}\nconst getCast = async (movieId) => {\n    try {\n        const response = await axios.get(END_POINTS.MOVIE_DETAILS + movieId + END_POINTS.CAST + appendToken());\n        if(response.status === 200) {\n            return response;\n        }\n\n        throw new Error(response)\n    } catch (error) {\n        console.log(error);\n    }\n}\nconst getReviews = async (movieId) => {\n    try {\n        const response = await axios.get(END_POINTS.MOVIE_DETAILS + movieId + END_POINTS.REVIEWS + appendToken());\n        if(response.status === 200) {\n            return response;\n        }\n\n        throw new Error(response)\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const movieService = {\n    getTrendingMovies,\n    searchMovie,\n    getMovieDetails,\n    getCast,\n    getReviews,\n    POSTER_URL\n}"],"names":["ReviewsList","styled","ReviewsListItem","UserName","CommentText","NoReviews","useState","reviews","setreviews","movieId","useParams","useEffect","movieService","then","results","data","catch","console","log","Section","title","length","map","author","content","id","AppSection","SectionTitle","children","Container","END_POINTS","axios","getTrendingMovies","response","status","Error","searchMovie","movie","getMovieDetails","getCast","getReviews","POSTER_URL"],"sourceRoot":""}