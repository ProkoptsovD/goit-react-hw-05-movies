{"version":3,"file":"static/js/249.d93ea932.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.component.js","constants/notifications.js","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.component.js","pages/MoviePage.js","services/movieService.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Movies = styled.ul``;\nexport const Movie = styled.li``;","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Movie, Movies } from './MovieList.styled';\n\nconst MovieList = ({ movies, path, location }) => {\n    return (\n        <Movies>\n            {\n                movies.map(({ id, original_title }) => (\n                    <Movie key={ id }>\n                        <Link\n                            to={path ? `${path}/${id}` : id.toString() }\n                            state={{ from: location }}\n                        >\n                            { original_title }\n                        </Link>\n                    </Movie>\n                ))\n            }\n        </Movies>\n    )\n}\n\nMovieList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            title: PropTypes.string,\n            id: PropTypes.number\n        })\n    ),\n    path: PropTypes.string,\n    location: PropTypes.shape({\n        hash: PropTypes.string,\n        key: PropTypes.string,\n        pathname: PropTypes.string,\n        search: PropTypes.string,\n        state: PropTypes.object,\n    })\n}\n\nexport default MovieList;","export const notifications = {\n    emptyQuery: 'Searching query mustn\\'t be an empty string! Please, type in something to start the searching...',\n    invalidQuery: 'Sorry, but there is no results by the query',\n}","import styled from 'styled-components';\n\nexport const SearchBar = styled.header`\n    top: 0;\n    left: 0;\n    position: sticky;\n    z-index: 1100;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 64px;\n    padding-right: 24px;\n    padding-left: 24px;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    color: #fff;\n    background-color: #3f51b5;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n        0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    background-color: #fff;\n    border-radius: 3px;\n    overflow: hidden;\n`;\n\nexport const Input = styled.input`\n    display: block;\n    width: 100%;\n    height: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 12px;\n    padding-right: 4px;\n`;\n\nexport const SerchButton = styled.button`\n    display: inline-block;\n    min-width: 48px;\n    height: 48px;\n    border-radius: 0;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n\n    &:hover {\n        opacity: 1;\n    }\n`;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchBar, SearchForm, Input, SerchButton } from './Searchbar.styled';\nimport Container from 'components/common/Container';\n\nexport const Searchbar = ({ onSubmit, clearInput }) => {\n    const [ inputValue, setInputValue ] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const sanitizedQuery = inputValue.trim().toLowerCase();\n        onSubmit(sanitizedQuery);\n    }\n\n    useEffect(() => {     \n        if(clearInput) setInputValue('');\n        \n    }, [clearInput]);\n\n\n    return (\n        <SearchBar>\n            <Container>\n                <SearchForm \n                    onSubmit={handleSubmit}\n                >\n                    <SerchButton type=\"submit\">\n                        Search\n                    </SerchButton>\n    \n                    <Input\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search images and photos\"\n                        value={inputValue}\n                        onChange={(e) => setInputValue(e.target.value)}\n                    />\n                </SearchForm>\n            </Container>\n        </SearchBar>\n    )\n}\n\nSearchbar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    clearInput: PropTypes.bool,\n}\n\nexport default Searchbar;","    import { useEffect, useState } from \"react\";\n    import { useLocation } from \"react-router-dom\";\n    import { movieService } from \"services\";\n    import { toast } from 'react-toastify';\n    import { notifications } from \"constants/notifications\";\n    import Searchbar from \"components/Searchbar\";\n    import MovieList from \"components/MovieList\";\n\n    const MoviePage = () => {\n        const [ movieList, setMovieList ] = useState(() => []);\n        const [ movie, setMovie ] = useState();\n        const [ shouldClearInput, setShouldClearInput ] = useState(false);\n        const location = useLocation();\n        console.log(location);\n        \n\n        useEffect(() => {\n            if(movie === undefined) {\n                return;\n            };\n\n            if(movie === '') {\n                toast.warn(notifications.emptyQuery);\n                \n                return;\n            }\n\n            movieService.searchMovie(movie).then(({ data: { results } }) => {\n                if (!results.length) {\n                    toast.error(notifications.invalidQuery);\n                    \n                    return;\n                }\n\n                setShouldClearInput(true);\n                setMovieList(results);\n            }).catch((error) => console.log(error));\n        }, [movie])\n\n        return (\n            <main>\n                <Searchbar\n                    onSubmit={ (movie) => setMovie(movie) }\n                    clearInput={ shouldClearInput }\n                />\n                {\n                    movieList.length\n                        ?   <MovieList\n                                movies={ movieList }\n                                location={location}\n                            />\n                        : null\n                }\n            </main>\n        )\n    }\n\nexport default MoviePage;","import axios from 'axios';\n\nconst AUTH_TOKEN = '5ce599886a4c0703a030654068991e03';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst POSTER_URL = 'https://image.tmdb.org/t/p/original'\nconst END_POINTS = {\n    TRENDING: 'trending/all/day',\n    SEARCH: 'search/movie',\n    MOVIE_DETAILS: 'movie/',\n    CAST: '/credits',\n    REVIEWS: '/reviews'\n}\n\naxios.defaults.baseURL = BASE_URL;\nconst appendToken = () => '?api_key=' + AUTH_TOKEN;\n\nconst getTrendingMovies = () => axios.get(END_POINTS.TRENDING + appendToken());\nconst searchMovie = (movie) => axios.get(END_POINTS.SEARCH + appendToken() + '&query=' + movie);\nconst getMovieDetails = (movieId) => axios.get(END_POINTS.MOVIE_DETAILS + movieId + appendToken());\nconst getCast = (movieId) => axios.get(END_POINTS.MOVIE_DETAILS + movieId + END_POINTS.CAST + appendToken());\nconst getReviews = (movieId) => axios.get(END_POINTS.MOVIE_DETAILS + movieId + END_POINTS.REVIEWS + appendToken());\n\nexport const movieService = {\n    getTrendingMovies,\n    searchMovie,\n    getMovieDetails,\n    getCast,\n    getReviews,\n    POSTER_URL\n}"],"names":["Movies","styled","Movie","movies","path","location","map","id","original_title","to","toString","state","from","notifications","SearchBar","SearchForm","Input","SerchButton","onSubmit","clearInput","useState","inputValue","setInputValue","useEffect","Container","e","preventDefault","sanitizedQuery","trim","toLowerCase","type","autoComplete","autoFocus","placeholder","value","onChange","target","movieList","setMovieList","movie","setMovie","shouldClearInput","setShouldClearInput","useLocation","console","log","undefined","movieService","then","results","data","length","toast","catch","error","MovieList","END_POINTS","axios","getTrendingMovies","searchMovie","getMovieDetails","movieId","getCast","getReviews","POSTER_URL"],"sourceRoot":""}